name: Packaging

on:
  push:
    tags:
      - "*"

jobs:
  Source:
    name: Source
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Get Version
        id: version
        run: |
          VERSION=$(git describe --tags)
          echo $VERSION
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Archive source files
        run: |
          pip3 install git-archive-all
          git-archive-all Makhber-${{ steps.version.outputs.version }}-src.zip
          git-archive-all Makhber-${{ steps.version.outputs.version }}-src.tar.xz

      - name: Upload source files
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Makhber ${{ steps.version.outputs.version }}
          draft: true
          files: |
            Makhber*.zip
            Makhber*.tar.xz

  Windows:
    name: Windows
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        QT_VER: [5.15.2, 6.6.2]
    env:
      VCPKG_BINARY_SOURCES: "clear;nuget,GitHub,readwrite"
      VCPKG_DEFAULT_TRIPLET: x64-windows
      QWT_VER: 6.2.0

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Restore cached Qt
        id: cache-qt
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/Qt
          key: ${{ runner.os }}-Qt-${{ matrix.QT_VER }}-Cache

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          setup-python: false
          version: ${{ matrix.QT_VER }}
          cache: ${{ steps.cache-qt.outputs.cache-hit }}
          dir: ${{ github.workspace }}/Qt
          archives: qtbase qtsvg qttools qttranslations

      - name: Restore cached Qwt
        id: cache-qwt
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/Qwt
          key: ${{ runner.os }}-Qwt-${{ env.QWT_VER }}-Qt-${{ matrix.QT_VER }}

      - name: Remove default MSVC
        run: |
          remove-item "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\Microsoft.VCToolsVersion.v143.default.*"

      - uses: ilammy/msvc-dev-cmd@v1
        if: steps.cache-qwt.outputs.cache-hit != 'true'
        with:
          toolset: 14.37
      - name: Build and install Qwt
        if: steps.cache-qwt.outputs.cache-hit != 'true'
        run: |
          choco install wget jom
          wget https://downloads.sourceforge.net/qwt/qwt-${{ env.QWT_VER }}.zip
          Expand-Archive qwt-${{ env.QWT_VER }}.zip -DestinationPath .; cd qwt-${{ env.QWT_VER }}
          ((Get-Content -path qwtconfig.pri -Raw) `
            -replace 'C:/Qwt-\$\$QWT_VERSION',"$Env:GITHUB_WORKSPACE/Qwt" `
            -replace 'QWT_CONFIG     \+= QwtExamples',"" `
            -replace 'QWT_CONFIG     \+= QwtPlayground',"" `
            -replace 'QWT_CONFIG     \+= QwtTests',"") `
            | Set-Content -Path .\qwtconfig.pri
          qmake qwt.pro
          jom /J "$Env:NUMBER_OF_PROCESSORS"
          jom install

      - name: Setup NuGet Credentials
        run: |
          & $(vcpkg fetch nuget | select -last 1) sources add `
          -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" `
          -name "GitHub" `
          -username ${{ github.repository_owner }} `
          -password "${{ secrets.GITHUB_TOKEN }}"

      - name: vcpkg package restore
        run: |
          cd $Env:VCPKG_INSTALLATION_ROOT
          git pull origin master
          Add-Content $Env:VCPKG_INSTALLATION_ROOT\triplets\$Env:VCPKG_DEFAULT_TRIPLET.cmake "set(VCPKG_BUILD_TYPE release)"
          vcpkg install zlib gsl muparser liborigin opengl gl2ps openssl pkgconf

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Python packages
        run: |
          pip3 install sip pyqt-builder
          if ("${{ matrix.QT_VER }}" -eq "6.6.2") {
            pip install pyqt6
          } else {
            pip install pyqt5
          }

      - name: Configuring
        run: |
          mkdir build; cd build
          cmake .. `
            -DCMAKE_BUILD_TYPE=Release `
            -DBUILD_SHARED_LIBS=ON `
            -DCMAKE_SYSTEM_VERSION="10.0" `
            -DPython3_ROOT_DIR=${{ env.pythonLocation }} `
            -DMAKHBER_SCRIPTING_PYTHON=ON `
            -DVCPKG_TARGET_TRIPLET="$Env:VCPKG_DEFAULT_TRIPLET" `
            -DCMAKE_TOOLCHAIN_FILE="$Env:VCPKG_INSTALLATION_ROOT\scripts\buildsystems\vcpkg.cmake" `
            -DCMAKE_PREFIX_PATH="$Env:GITHUB_WORKSPACE\Qwt" `
            -DRUNTIME_DIRS="$Env:VCPKG_INSTALLATION_ROOT/installed/$Env:VCPKG_DEFAULT_TRIPLET/bin;$Env:GITHUB_WORKSPACE\Qwt\lib;$Env:Qt5_DIR\bin;$Env:Qt6_DIR\bin"

      - name: Building
        run: |
          cmake --build build --config Release -- -maxCpuCount

      - name: Packaging
        run: |
          cd build
          cpack -G NSIS
          if ("${{ matrix.QT_VER }}" -eq "6.6.2") {
            Get-ChildItem *.exe | Rename-Item -NewName { $_.Name -replace '.exe','-Qt6.exe' }
          } else {
            Get-ChildItem *.exe | Rename-Item -NewName { $_.Name -replace '.exe','-Qt5.exe' }
          }

      - name: Upload Windows installers
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          files: |
            build/Makhber*.exe

  macos:
    runs-on: macos-12
    name: macos
    strategy:
      fail-fast: false
      matrix:
        QT_VER: [5, 6]
    env:
      HOMEBREW_NO_AUTO_UPDATE: 1
      HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install prerequisties
        run: |
          brew list -1 | grep python | while read formula; do brew unlink $formula; brew link --overwrite $formula; done
          brew update
          brew install --display-times muparser liborigin gsl gl2ps
          if [[ ${{ matrix.QT_VER }} == 6 ]]; then
            brew install qwt
          else
            brew install qwt-qt5
          fi

      - name: Configuring
        run: |
          export PATH=/usr/local/opt/qt@5/bin:$PATH
          mkdir build && cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH=/usr/local/opt/qwt-qt5

      - name: Building
        run: |
          make -j$(sysctl -n hw.logicalcpu) -C build

      - name: Packaging
        continue-on-error: true
        run: |
          cd build
          cpack -G DragNDrop
          mv *.dmg Makhber-$(git describe --tags)-macos-$(uname -m)-Qt${{ matrix.QT_VER }}.dmg

      - name: Upload MacOS package
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          files: build/Makhber*.dmg

  Snap:
    runs-on: ubuntu-22.04
    name: Snap

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install snapcraft
        run: |
          sudo snap install snapcraft --classic

      - name: Building & Packaging
        id: snap_build
        run: |
          sudo snapcraft --debug --destructive-mode
          echo "snap=$(echo $(ls *.snap))" >> $GITHUB_OUTPUT

      - name: Upload Snap
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          files: ${{ steps.snap_build.outputs.snap }}

      - uses: snapcore/action-publish@v1
        if: ${{ github.repository_owner == 'Makhber' }}
        with:
          store_login: ${{ secrets.SNAP_STORE_LOGIN }}
          snap: ${{ steps.snap_build.outputs.snap }}
          release: beta

      - name: Installing
        run: |
          sudo snap install --dangerous *.snap

      - name: Show contents
        run: |
          tree /snap/makhber/current/usr

  Flatpak:
    runs-on: ubuntu-20.04
    name: Flatpak

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install prerequisties
        run: |
          sudo add-apt-repository ppa:flatpak/stable
          sudo apt update
          sudo apt install -y --no-install-recommends \
            flatpak-builder \
            elfutils
          flatpak remote-add --user --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
          flatpak install --user -y org.kde.Platform//5.15-23.08 org.kde.Sdk//5.15-23.08

      - name: Building
        run: |
          mkdir build 
          cd build
          flatpak-builder \
            --repo=repo \
            --install-deps-from=flathub \
            --user \
            --force-clean \
            ./build \
            ../packaging/flatpak/com.github.makhber.Makhber.yaml

      - name: Packaging
        run: |
          cd build
          flatpak \
            build-bundle \
            --runtime-repo=https://dl.flathub.org/repo/flathub.flatpakrepo \
            repo \
            Makhber-$(git describe --tags)-x86_64.flatpak \
            com.github.makhber.Makhber

      - name: Upload Flatpak
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          files: build/Makhber*.flatpak

      - name: Installing
        run: |
          flatpak install --user -y build/*.flatpak

      - name: Show contents
        run: |
          tree $HOME/.local/share/flatpak/app/com.github.makhber.Makhber/x86_64/master/active/files

  AppImage:
    runs-on: ubuntu-20.04
    name: AppImage
    strategy:
      fail-fast: false
      matrix:
        QT_VER: [5.15.2, 6.6.2]
    env:
      VCPKG_BINARY_SOURCES: "clear;nuget,GitHub,readwrite"
      VCPKG_DEFAULT_TRIPLET: x64-linux
      QWT_VER: 6.2.0
      PYTHON_VERSION: "3.11"

    steps:
      - name: Get Processor Info
        run : lscpu | grep name

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Restore cached Qt
        id: cache-qt
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/Qt
          key: ${{ runner.os }}-Qt-${{ matrix.QT_VER }}-Cache

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.QT_VER }}
          cache: ${{ steps.cache-qt.outputs.cache-hit }}
          dir: ${{ github.workspace }}/Qt
          archives: qtbase qtsvg qttools qttranslations icu

      # Python version used to build makhber must be the same for miniconda
      - uses: actions/setup-python@v5
        with:
          python-version: '${{ env.PYTHON_VERSION }}'

      - name: Install prerequisties
        run: |
          sudo apt remove -y libgsl23 libgslcblas0
          sudo apt install -y --no-install-recommends \
            libglu1-mesa-dev \
            libgl2ps-dev \
            xvfb \
            wget
          if [[ ${{ matrix.QT_VER }} == "6.6.2" ]]; then
            sudo apt install -y --no-install-recommends \
              libxkbcommon-dev \
              libxcb-cursor0 \
              libvulkan-dev
          fi
          pip3 install sip pyqt-builder
          if [[ "${{ matrix.QT_VER }}" == "6.6.2" ]]; then
            pip3 install pyqt6
          else
            pip3 install pyqt5
          fi

      - name: Get GCC version
        id: gcc-version
        run: echo "gcc_version=$(gcc -dumpversion)" >> $GITHUB_OUTPUT

      - name: Restore cached Qwt
        id: cache-qwt
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/Qwt
          key: ${{ runner.os }}-Qwt-${{ env.QWT_VER }}-Qt-${{ matrix.QT_VER }}-gcc-${{ steps.gcc-version.outputs.gcc_version }}

      - name: Build and install Qwt
        if: steps.cache-qwt.outputs.cache-hit != 'true'
        run: |
          wget https://downloads.sourceforge.net/qwt/qwt-${{ env.QWT_VER }}.tar.bz2
          tar -xf qwt-${{ env.QWT_VER }}.tar.bz2 && cd qwt-${{ env.QWT_VER }}
          sed -i "s|= \/usr\/local\/qwt-\$\$QWT\_VERSION|= ${GITHUB_WORKSPACE}/Qwt|g" qwtconfig.pri
          sed -i "s|^QWT_CONFIG\\s*+=\\s*QwtDesigner$|#|g" qwtconfig.pri
          sed -i "s|^QWT_CONFIG\\s*+=\\s*QwtExamples$|#|g" qwtconfig.pri
          sed -i "s|^QWT_CONFIG\\s*+=\\s*QwtPlayground$|#|g" qwtconfig.pri
          sed -i "s|^QWT_CONFIG\\s*+=\\s*QwtTests$|#|g" qwtconfig.pri
          qmake CONFIG-=debug_and_release CONFIG+=release qwt.pro
          make -j$(nproc)
          make install

      - name: Setup NuGet Credentials
        run: |
          mono `vcpkg fetch nuget | tail -n 1` sources add \
            -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            -storepasswordincleartext \
            -name "GitHub" \
            -username ${{ github.repository_owner }} \
            -password "${{ secrets.GITHUB_TOKEN }}"

      - name: vcpkg package restore
        run: |
          cd $VCPKG_INSTALLATION_ROOT
          echo "set(VCPKG_BUILD_TYPE release)" >> $VCPKG_INSTALLATION_ROOT/triplets/$VCPKG_DEFAULT_TRIPLET.cmake
          vcpkg install gsl muparser

      - name: Configuring
        run: |
          mkdir build && cd build
          cmake .. \
            -DMAKHBER_SCRIPTING_PYTHON=ON \
            -DCMAKE_INSTALL_PREFIX=/usr \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=ON \
            -DOpenGL_GL_PREFERENCE=LEGACY \
            -DVCPKG_TARGET_TRIPLET="$VCPKG_DEFAULT_TRIPLET" \
            -DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake \
            -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/Qwt

      - name: Building
        run: |
          xvfb-run make -j$(nproc) -C build

      - name: Packaging
        run: |
          cd build
          make install DESTDIR=AppDir
          export LD_LIBRARY_PATH=${PWD}/bin:${GITHUB_WORKSPACE}/Qwt/lib:$LD_LIBRARY_PATH
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          wget https://raw.githubusercontent.com/linuxdeploy/linuxdeploy-plugin-conda/master/linuxdeploy-plugin-conda.sh
          chmod +x linuxdeploy*
          if [[ "${{ matrix.QT_VER }}" == "6.6.2" ]]; then
            export VERSION=$(git describe --tags)-Qt6
            export PIP_REQUIREMENTS="pyqt6 pyqt6-sip --no-deps"
          else
            export VERSION=$(git describe --tags)-Qt5
            export PIP_REQUIREMENTS="pyqt5 pyqt5-sip --no-deps"
          fi
          export CONDA_PYTHON_VERSION=${{ env.PYTHON_VERSION }}
          ./linuxdeploy-x86_64.AppImage \
            --appdir ./AppDir \
            --plugin qt \
            --plugin conda \
            --output appimage \
            --custom-apprun=../packaging/appimage/AppRun

      - name: Upload AppImage
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          files: build/Makhber*.AppImage

  DEB:
    name: Ubuntu 22.04 DEB
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install prerequisties
        run: |
          sudo apt update
          sudo apt install -y --no-install-recommends \
            pkgconf \
            qtbase5-dev \
            libqt5svg5-dev \
            libqt5opengl5-dev \
            qttools5-dev \
            libgsl-dev \
            libmuparser-dev \
            libqwt-qt5-dev \
            libgl2ps-dev \
            pyqt5-dev \
            python3-pyqt5 \
            python3-pyqtbuild \
            sip-tools \
            ninja-build

      - name: Configuring
        run: |
          mkdir build && cd build
          cmake .. \
            -GNinja \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=ON \
            -DMAKHBER_SCRIPTING_PYTHON=ON

      - name: Building
        run: |
          ninja -C build

      - name: Packaging
        run: |
          cd build
          cpack -G DEB
          mv Makhber*.deb Makhber_$(git describe --tags)~22.04_amd64.deb

      - name: Upload Debian package
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          files: build/Makhber*.deb

  RPM:
    name: OpenSUSE leap
    runs-on: ubuntu-22.04
    container: opensuse/leap

    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true

      - name: Install prerequisties
        run: |
          zypper -n install \
            gcc-c++ \
            cmake \
            ninja \
            libqt5-qtbase-devel \
            libqt5-qtsvg-devel \
            libqt5-linguist-devel \
            gsl-devel \
            muparser-devel \
            liborigin-devel \
            qwt6-qt5-devel \
            gl2ps-devel \
            zlib-devel \
            python3-qt5-devel \
            python3-pyqt-builder \
            glu-devel \
            python3 \
            xvfb-run \
            rpm-build \
            git

      - name: Configuring
        run: |
          mkdir build && cd build
          cmake .. \
            -GNinja \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=ON \
            -DMAKHBER_SCRIPTING_PYTHON=ON

      - name: Building
        run: |
          ninja -C build

      - name: Packaging
        run: |
          git config --global --add safe.directory /__w/makhber/makhber
          cd build
          cpack -G RPM
          mv Makhber*.rpm makhber-$(git describe --tags).x86_64.rpm

      - name: Upload RPM package
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          files: build/makhber*.rpm
