name: Packaging

on:
  push:
    tags:
      - "*"

jobs:

  Source:
    name: Source
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Get Version
        id: version
        run: |
          VERSION=$(git describe --tags)
          echo $VERSION
          echo "::set-output name=version::$VERSION"

      - name: Archive source files
        run: |
          pip3 install git-archive-all
          git-archive-all Makhber-${{ steps.version.outputs.version }}-src.zip
          git-archive-all Makhber-${{ steps.version.outputs.version }}-src.tar.xz

      - name: Upload source files
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Release ${{ steps.version.outputs.version }}
          draft: true
          files: |
            Makhber*.zip
            Makhber*.tar.xz

  Windows:
    name: Windows
    runs-on: windows-latest
    env:
      VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ runner.os }}-QtCache

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: 5.15.2
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Setup NuGet Credentials
        run: |
          & $(vcpkg fetch nuget | select -last 1) sources add `
          -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" `
          -storepasswordincleartext `
          -name "GitHub" `
          -username ${{ github.repository_owner }} `
          -password "${{ secrets.GITHUB_TOKEN }}"

      - name: vcpkg package restore
        run: |
          vcpkg install zlib gsl muparser opengl gl2ps openssl --triplet x64-windows

      - name: Install Python packages
        run: |
          pip3 install pyqt5 sip pyqt-builder numpy

      - name: Configuring
        run: |
          mkdir build; cd build
          cmake .. `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_SYSTEM_VERSION="10.0" `
            -DMAKHBER_SCRIPTING_PYTHON=ON `
            -DCMAKE_TOOLCHAIN_FILE="$Env:VCPKG_INSTALLATION_ROOT\scripts\buildsystems\vcpkg.cmake" `
            -DRUNTIME_DIR="$Env:VCPKG_INSTALLATION_ROOT/installed/x64-windows/bin"

      - name: Building
        run: |
          cmake --build build --config Release -- -maxCpuCount

      - name: Packaging
        run: |
          cd build
          cpack -G NSIS

      - name: Upload Windows installers
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          files: |
            build/Makhber*.exe

  macos:
    runs-on: macos-latest
    name: macos

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ runner.os }}-QtCache

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: 5.15.2
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Install prerequisties
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1
        run: |
          brew install --display-times muparser gsl gl2ps

      - name: Configuring
        run: |
          mkdir build && cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release

      - name: Building
        run: |
          make -j$(sysctl -n hw.logicalcpu) -C build

      - name: Packaging
        continue-on-error: true
        run: |
          cd build
          cpack -G DragNDrop

      - name: Upload MacOS package
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          files: build/Makhber*.dmg

  Snap:
    runs-on: ubuntu-20.04
    name: Snap

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install snapcraft
        run: |
          sudo snap install snapcraft --classic

      - name: Building & Packaging
        id: snap_build
        run: |
          snapcraft --debug --destructive-mode --enable-experimental-extensions
          echo "::set-output name=snap::$(echo $(ls *.snap))"

      - name: Upload Snap
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          files: ${{ steps.snap_build.outputs.snap }}

      - uses: snapcore/action-publish@v1
        if: ${{ github.repository_owner == 'Makhber' }}
        with:
          store_login: ${{ secrets.SNAP_STORE_LOGIN }}
          snap: ${{ steps.snap_build.outputs.snap }}
          release: beta

  Flatpak:
    runs-on: ubuntu-20.04
    name: Flatpak

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install prerequisties
        run: |
          sudo apt update
          sudo apt install -y --no-install-recommends \
            flatpak-builder \
            elfutils
          flatpak remote-add --user --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo

      - name: Building
        run: |
          mkdir build 
          cd build
          flatpak-builder \
            --repo=repo \
            --install-deps-from=flathub \
            --user \
            --force-clean \
            ./build \
            ../packaging/flatpak/com.github.makhber.Makhber.yaml

      - name: Packaging
        run: |
          cd build
          flatpak \
            build-bundle \
            --runtime-repo=https://dl.flathub.org/repo/flathub.flatpakrepo \
            repo \
            Makhber-$(git describe --tags)-x86_64.flatpak \
            com.github.makhber.Makhber

      - name: Upload Flatpak
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          files: build/Makhber*.flatpak

  AppImage:
    runs-on: ubuntu-18.04
    name: AppImage
    env:
      VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'
      QT_VER: 5.15.2

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ runner.os }}-Qt-${{ env.QT_VER }}-Cache

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ env.QT_VER }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Install prerequisties
        run: |
          sudo apt install -y --no-install-recommends \
            libglu1-mesa-dev \
            libxcb-util1 \
            libxcb-glx0 \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-randr0 \
            libxcb-render-util0 \
            libxcb-render0 \
            libxcb-shape0 \
            libxcb-shm0 \
            libxcb-sync1 \
            libxcb-xfixes0 \
            libxcb-xinerama0 \
            libxcb-xinput0 \
            libxcb-xkb1 \
            libxcb1 \
            xvfb \
            wget
          pip3 install pyqt5 sip pyqt-builder

      - name: Setup NuGet Credentials
        run: |
          mono `vcpkg fetch nuget | tail -n 1` sources add \
            -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            -storepasswordincleartext \
            -name "GitHub" \
            -username ${{ github.repository_owner }} \
            -password "${{ secrets.GITHUB_TOKEN }}"

      - name: vcpkg package restore
        run: |
          vcpkg install gsl muparser

      - name: Configuring
        run: |
          mkdir build && cd build
          cmake .. \
            -DMAKHBER_SCRIPTING_PYTHON=ON \
            -DCMAKE_INSTALL_PREFIX=/usr \
            -DCMAKE_BUILD_TYPE=Release \
            -DOpenGL_GL_PREFERENCE=LEGACY \
            -DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake

      - name: Building
        run: |
          xvfb-run make -j$(nproc) -C build

      - name: Packaging
        run: |
          cd build
          make install DESTDIR=AppDir
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          wget https://raw.githubusercontent.com/linuxdeploy/linuxdeploy-plugin-conda/master/linuxdeploy-plugin-conda.sh
          chmod +x linuxdeploy*
          export VERSION=$(git describe --tags)
          export PIP_REQUIREMENTS="pyqt5 pyqt5-sip --no-deps"
          export CONDA_PYTHON_VERSION=3.9
          ./linuxdeploy-x86_64.AppImage --appdir ./AppDir --plugin qt --plugin conda --output appimage --custom-apprun=../packaging/appimage/AppRun

      - name: Upload AppImage
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          files: build/Makhber*.AppImage

  DEB:
    name: Ubuntu 20.04 DEB
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install prerequisties
        run: |
          sudo apt install -y --no-install-recommends \
            qtbase5-dev \
            libqt5svg5-dev \
            libqt5opengl5-dev \
            qttools5-dev \
            libgsl-dev \
            libmuparser-dev \
            libgl2ps-dev \
            pyqt5-dev \
            python3-pyqt5 \
            ninja-build

      - name: Configuring
        run: |
          mkdir build && cd build
          cmake .. \
            -GNinja \
            -DCMAKE_BUILD_TYPE=Release \
            -DMAKHBER_SCRIPTING_PYTHON=ON

      - name: Building
        run: |
          ninja -C build

      - name: Packaging
        run: |
          cd build
          cpack -G DEB
          mv Makhber*.deb Makhber_$(git describe --tags)~20.04_amd64.deb

      - name: Upload Debian package
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          files: build/Makhber*.deb

  RPM:
    name: Fedora 34 RPM
    runs-on: ubuntu-20.04
    container: fedora

    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true

      - name: Install prerequisties
        run: |
          sudo dnf install -y \
            gcc-c++ \
            cmake \
            ninja-build \
            qt5-qtbase-devel \
            qt5-qtsvg-devel \
            qt5-qttools-devel \
            gsl-devel \
            muParser-devel \
            gl2ps-devel \
            zlib-devel \
            mesa-libGLU-devel \
            rpm-build \
            git

      - name: Configuring
        run: |
          mkdir build && cd build
          cmake .. \
            -GNinja \
            -DCMAKE_BUILD_TYPE=Release

      - name: Building
        run: |
          ninja -C build

      - name: Packaging
        run: |
          cd build
          cpack -G RPM
          mv Makhber*.rpm makhber-$(git describe --tags).fc34.x86_64.rpm

      - name: Upload RPM package
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          files: build/makhber*.rpm
