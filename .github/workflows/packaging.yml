name: Packaging

on:
  push:
    tags:
      - "*"

jobs:

  Release:
    name: Release
    runs-on: windows-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: ./NEWS.md
          draft: false
          prerelease: false

  MSVC:
    name: MSVC
    runs-on: windows-latest
    needs: Release
    env:
      VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ runner.os }}-QtCache

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: 5.15.2
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Setup NuGet Credentials
        run: |
          & $(vcpkg fetch nuget | select -last 1) sources add `
          -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" `
          -storepasswordincleartext `
          -name "GitHub" `
          -username ${{ github.repository_owner }} `
          -password "${{ secrets.GITHUB_TOKEN }}"

      - name: vcpkg package restore
        run: |
          vcpkg install zlib gsl muparser opengl gl2ps gtest --triplet x64-windows

      - name: Configuring
        run: |
          mkdir build; cd build
          $Env:VCPKG_INSTALLATION_ROOT
          cmake .. `
            -DSCIDAVIS_ORIGIN_IMPORT=ON `
            -DSCIDAVIS_BUILD_TESTS=ON `
            -DCMAKE_TOOLCHAIN_FILE="$Env:VCPKG_INSTALLATION_ROOT\scripts\buildsystems\vcpkg.cmake" `
            -DRUNTIME_DIR="$Env:VCPKG_INSTALLATION_ROOT/installed/x64-windows/bin" `
            -DCPACK_PACKAGE_FILE_NAME=scidavis

      - name: Building
        run: |
          cmake --build build --config Release -- -maxCpuCount

      - name: Testing
        run: |
          cd build
          ctest -C Release --output-on-failure

      - name: Packaging
        id: packaging
        continue-on-error: true
        run: |
          $Env:version = (git describe --tags)
          $Env:version
          echo "::set-output name=version::$Env:version"
          cd build
          cpack -G WIX
          cpack -G NSIS

      - name: Upload MSI installer
        continue-on-error: true
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.Release.outputs.upload_url }}
          asset_path: build/scidavis.msi
          asset_name: scidavis-${{ steps.packaging.outputs.version }}-win64.msi
          asset_content_type: application/zip

      - name: Upload NSIS installer
        continue-on-error: true
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.Release.outputs.upload_url }}
          asset_path: build/scidavis.exe
          asset_name: scidavis-${{ steps.packaging.outputs.version }}-win64.exe
          asset_content_type: application/zip

  macos:
    runs-on: macos-latest
    name: macos
    needs: Release

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ runner.os }}-QtCache

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Install prerequisties
        run: |
          brew install muparser gsl gl2ps googletest

      - name: Configuring
        run: |
          mkdir build && cd build
          cmake .. \
            -DSCIDAVIS_ORIGIN_IMPORT=ON \
            -DSCIDAVIS_BUILD_TESTS=ON \
            -DCPACK_PACKAGE_FILE_NAME=scidavis

      - name: Building
        run: |
          make -j$(sysctl -n hw.logicalcpu) -C build

      - name: Testing
        run: |
          cd build
          ctest --output-on-failure

      - name: Packaging
        id: packaging
        continue-on-error: true
        run: |
          export version=$(git describe --tags)
          echo $version
          echo "::set-output name=version::$version"
          cd build
          cpack -G DragNDrop

      - name: Upload MacOS package
        continue-on-error: true
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.Release.outputs.upload_url }}
          asset_path: build/scidavis.dmg
          asset_name: scidavis-${{ steps.packaging.outputs.version }}-macos.dmg
          asset_content_type: application/zip
