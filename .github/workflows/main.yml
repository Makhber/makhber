name: CI Tests

on: 
  pull_request:
  push:
    branches:
      - '*'

jobs:
  Ubuntu:
    runs-on: ubuntu-22.04
    name: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        QT_VER: [5.15.2, 6.3.2]
    env:
      QWT_VER: 6.2.0

    steps:
      - name: Get Processor Info
        run : |
          lscpu | grep name
          nproc
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Restore cached Qt
        id: cache-qt
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/Qt
          key: ${{ runner.os }}-Qt-${{ matrix.QT_VER }}-Cache

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.QT_VER }}
          cache: ${{ steps.cache-qt.outputs.cache-hit }}
          dir: ${{ github.workspace }}/Qt

      - name: Install prerequisties
        run: |
          sudo apt update
          sudo apt install -y --no-install-recommends \
            libglu1-mesa-dev \
            libmuparser-dev \
            libgsl-dev \
            libgl2ps-dev \
            libgtest-dev \
            libxcb-xinput0 \
            libxcb-xkb1 \
            xvfb
          if [[ ${{ matrix.QT_VER }} == "6.3.2" ]]; then
            sudo apt install -y --no-install-recommends \
              libxkbcommon-dev \
              libvulkan-dev
          fi

      - name: Get GCC version
        id: gcc-version
        run:
          gcc_version=
          echo "::set-output name=gcc_version::$(gcc -dumpversion)"

      - name: Restore cached Qwt
        id: cache-qwt
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/Qwt
          key: ${{ runner.os }}-Qwt-${{ env.QWT_VER }}-Qt-${{ matrix.QT_VER }}-gcc-${{ steps.gcc-version.outputs.gcc_version }}

      - name: Build and install Qwt
        if: steps.cache-qwt.outputs.cache-hit != 'true'
        run: |
          wget https://downloads.sourceforge.net/qwt/qwt-${{ env.QWT_VER }}.tar.bz2
          tar -xf qwt-${{ env.QWT_VER }}.tar.bz2 && cd qwt-${{ env.QWT_VER }}
          sed -i "s|= \/usr\/local\/qwt-\$\$QWT\_VERSION|= ${GITHUB_WORKSPACE}/Qwt|g" qwtconfig.pri
          sed -i "s|QWT_CONFIG     += QwtExamples||g" qwtconfig.pri
          sed -i "s|QWT_CONFIG     += QwtPlayground||g" qwtconfig.pri
          sed -i "s|QWT_CONFIG     += QwtTests||g" qwtconfig.pri
          qmake qwt.pro
          make -j$(nproc)
          make install

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python packages
        run: |
          pip3 install sip pyqt-builder numpy
          if [[ "${{ matrix.QT_VER }}" == "6.3.2" ]]; then
            pip3 install pyqt6
          else
            pip3 install pyqt5
          fi

      - name: Configuring
        run: |
          mkdir build && cd build
          cmake .. \
            -DMAKHBER_SEARCH_FOR_UPDATES=OFF \
            -DMAKHBER_DOWNLOAD_LINKS=OFF \
            -DMAKHBER_SCRIPTING_PYTHON=ON \
            -DMAKHBER_BUILD_TESTS=ON \
            -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/Qwt

      - name: Building
        run: |
          xvfb-run make -j$(nproc) -C build

      - name: Testing
        run: |
          cd build
          xvfb-run -a ctest --output-on-failure --repeat until-pass:3

  MSVC:
    name: MSVC 2022
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        QT_VER: [5.15.2, 6.3.2]
    env:
      VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'
      VCPKG_DEFAULT_TRIPLET: x64-windows
      QWT_VER: 6.2.0

    steps:
      - name: Get Processor Info
        run : |
          Get-CIMInstance -Class Win32_Processor | Select-Object -Property Name
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Restore cached Qt
        id: cache-qt
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/Qt
          key: ${{ runner.os }}-Qt-${{ matrix.QT_VER }}-Cache

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.QT_VER }}
          cache: ${{ steps.cache-qt.outputs.cache-hit }}
          dir: ${{ github.workspace }}/Qt

      - name: Restore cached Qwt
        id: cache-qwt
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/Qwt
          key: ${{ runner.os }}-Qwt-${{ env.QWT_VER }}-Qt-${{ matrix.QT_VER }}

      - uses: ilammy/msvc-dev-cmd@v1
        if: steps.cache-qwt.outputs.cache-hit != 'true'
      - name: Build and install Qwt
        if: steps.cache-qwt.outputs.cache-hit != 'true'
        run: |
          choco install wget jom
          wget https://downloads.sourceforge.net/qwt/qwt-${{ env.QWT_VER }}.zip
          Expand-Archive qwt-${{ env.QWT_VER }}.zip -DestinationPath .; cd qwt-${{ env.QWT_VER }}
          ((Get-Content -path qwtconfig.pri -Raw) `
            -replace 'C:/Qwt-\$\$QWT_VERSION',"$Env:GITHUB_WORKSPACE/Qwt" `
            -replace 'QWT_CONFIG     \+= QwtExamples',"" `
            -replace 'QWT_CONFIG     \+= QwtPlayground',"" `
            -replace 'QWT_CONFIG     \+= QwtTests',"") `
            | Set-Content -Path .\qwtconfig.pri
          qmake qwt.pro
          jom /J "$Env:NUMBER_OF_PROCESSORS"
          jom install

      - name: Setup NuGet Credentials
        run: |
          & $(vcpkg fetch nuget | select -last 1) sources add `
          -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" `
          -name "GitHub" `
          -username ${{ github.repository_owner }} `
          -password "${{ secrets.GITHUB_TOKEN }}"

      - name: vcpkg package restore
        run: |
          cd $Env:VCPKG_INSTALLATION_ROOT
          git pull origin master
          vcpkg install zlib gsl muparser opengl gl2ps gtest pkgconf

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python packages
        run: |
          pip install sip pyqt-builder numpy
          if ("${{ matrix.QT_VER }}" -eq "6.3.2") {
            pip install pyqt6
          } else {
            pip install pyqt5
          }

      - name: Configuring
        run: |
          mkdir build; cd build
          cmake .. `
            -DCMAKE_BUILD_TYPE=RelWithDebInfo `
            -DCMAKE_SYSTEM_VERSION="10.0" `
            -DPython3_ROOT_DIR=${{ env.pythonLocation }} `
            -DCMAKE_TOOLCHAIN_FILE="$Env:VCPKG_INSTALLATION_ROOT\scripts\buildsystems\vcpkg.cmake" `
            -DCMAKE_PREFIX_PATH="$Env:GITHUB_WORKSPACE\Qwt" `
            -DMAKHBER_SCRIPTING_PYTHON=ON `
            -DMAKHBER_BUILD_TESTS=ON

      - name: Building
        run: |
          cmake --build build --config RelWithDebInfo -- -maxCpuCount

      - name: Testing
        run: |
          $Env:PATH = "$Env:GITHUB_WORKSPACE\Qwt\lib;$Env:PATH"
          cd build
          ctest -C RelWithDebInfo --output-on-failure --repeat until-pass:3

  macos:
    runs-on: macos-12
    name: macos
    strategy:
      fail-fast: false
      matrix:
        QT_VER: [5.15, 6.3.2]
    env:
      QWT_VER: 6.2.0

    steps:
      - name: Get Processor Info
        run : |
          sysctl -n machdep.cpu.brand_string
          sysctl -n hw.logicalcpu
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Restore cached Qt
        if: ${{ matrix.QT_VER == '6.3.2' }}
        id: cache-qt
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/Qt
          key: ${{ runner.os }}-Qt-${{ matrix.QT_VER }}-Cache

      - name: Install Qt
        if: ${{ matrix.QT_VER == '6.3.2' }}
        uses: jurplel/install-qt-action@v3
        with:
          setup-python: false
          version: ${{ matrix.QT_VER }}
          cache: ${{ steps.cache-qt.outputs.cache-hit }}
          dir: ${{ github.workspace }}/Qt

      - name: Install prerequisties
        run: |
          brew update
          brew install --display-times muparser gsl gl2ps googletest
          if [[ "${{ matrix.QT_VER }}" == "5.15" ]]; then
            brew install qwt-qt5
          fi

      - name: Restore cached Qwt
        if: ${{ matrix.QT_VER == '6.3.2' }}
        id: cache-qwt
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/Qwt
          key: ${{ runner.os }}-Qwt-${{ env.QWT_VER }}-Qt-${{ matrix.QT_VER }}

      - name: Build and install Qwt
        if: ${{ steps.cache-qwt.outputs.cache-hit != 'true' && matrix.QT_VER == '6.3.2' }}
        run: |
          wget https://downloads.sourceforge.net/qwt/qwt-${{ env.QWT_VER }}.tar.bz2
          tar -xf qwt-${{ env.QWT_VER }}.tar.bz2 && cd qwt-${{ env.QWT_VER }}
          sed -i .bak "s|= \/usr\/local\/qwt-\$\$QWT\_VERSION|= ${GITHUB_WORKSPACE}/Qwt|g" qwtconfig.pri
          sed -i .bak "s|QWT_CONFIG     += QwtExamples||g" qwtconfig.pri
          sed -i .bak "s|QWT_CONFIG     += QwtPlayground||g" qwtconfig.pri
          sed -i .bak "s|QWT_CONFIG     += QwtTests||g" qwtconfig.pri
          qmake qwt.pro
          make -j$(sysctl -n hw.logicalcpu)
          make install

      - name: Configuring
        run: |
          export PATH=/usr/local/opt/qt@5/bin:$PATH
          if [[ "${{ matrix.QT_VER }}" == "6.3.2" ]]; then
            QWT_PATH=${GITHUB_WORKSPACE}/Qwt
          else
            QWT_PATH=/usr/local/opt/qwt-qt5
          fi
          mkdir build && cd build
          cmake .. \
            -DMAKHBER_BUILD_TESTS=ON \
            -DCMAKE_PREFIX_PATH=${QWT_PATH}

      - name: Building
        run: |
          make -j$(sysctl -n hw.logicalcpu) -C build

      - name: Testing
        run: |
          export DYLD_FALLBACK_FRAMEWORK_PATH=${GITHUB_WORKSPACE}/Qwt/lib
          cd build
          ctest --output-on-failure --repeat until-pass:3
