name: CI Tests

on: 
  pull_request:
  push:
    branches:
      - '*'

jobs:
  Ubuntu:
    runs-on: ubuntu-20.04
    name: ubuntu-20.04
    env:
      QT_VER: 5.15.2
      QWT_VER: 6.2.0

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ runner.os }}-Qt-${{ env.QT_VER }}-Cache

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ env.QT_VER }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Install prerequisties
        run: |
          sudo apt update
          sudo apt install -y --no-install-recommends \
            libglu1-mesa-dev \
            libxcb-util1 \
            libxcb-glx0 \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-randr0 \
            libxcb-render-util0 \
            libxcb-render0 \
            libxcb-shape0 \
            libxcb-shm0 \
            libxcb-sync1 \
            libxcb-xfixes0 \
            libxcb-xinerama0 \
            libxcb-xinput0 \
            libxcb-xkb1 \
            libxcb1 \
            libmuparser-dev \
            libgsl-dev \
            libgtest-dev \
            xvfb

      - name: Get GCC version
        id: gcc-version
        run:
          gcc_version=
          echo "::set-output name=gcc_version::$(gcc -dumpversion)"

      - name: Cache Qwt
        id: cache-qwt
        uses: actions/cache@v1
        with:
          path: ../Qwt
          key: ${{ runner.os }}-Qwt-${{ env.QWT_VER }}-Qt-${{ env.QT_VER }}-gcc-${{ steps.gcc-version.outputs.gcc_version }}

      - name: Build and install Qwt
        if: steps.cache-qwt.outputs.cache-hit != 'true'
        run: |
          wget https://downloads.sourceforge.net/qwt/qwt-${{ env.QWT_VER }}.tar.bz2
          tar -xf qwt-${{ env.QWT_VER }}.tar.bz2 && cd qwt-${{ env.QWT_VER }}
          sed -i "s|= \/usr\/local\/qwt-\$\$QWT\_VERSION|= ${GITHUB_WORKSPACE}/../Qwt|g" qwtconfig.pri
          qmake CONFIG-=debug_and_release CONFIG+=release qwt.pro
          make -j$(nproc)
          make install

      - name: Install Python packages
        run: |
          pip3 install sip pyqt5 pyqt-builder numpy

      - name: Configuring
        run: |
          mkdir build && cd build
          cmake .. \
            -DMAKHBER_SEARCH_FOR_UPDATES=OFF \
            -DMAKHBER_DOWNLOAD_LINKS=OFF \
            -DMAKHBER_SCRIPTING_PYTHON=ON \
            -DMAKHBER_BUILD_TESTS=ON \
            -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/../Qwt

      - name: Building
        run: |
          xvfb-run make -j$(nproc) -C build

      - name: Testing
        run: |
          cd build
          export PYTHONPATH=$PWD/sip/build/makhber
          xvfb-run -a ctest --output-on-failure --repeat until-pass:3

  MSVC:
    name: Windows MSVC
    runs-on: windows-latest
    env:
      VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup NuGet Credentials
        run: |
          & $(vcpkg fetch nuget | select -last 1) sources add `
          -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" `
          -storepasswordincleartext `
          -name "GitHub" `
          -username ${{ github.repository_owner }} `
          -password "${{ secrets.GITHUB_TOKEN }}"

      - name: vcpkg package restore
        run: |
          vcpkg install zlib gsl qwt muparser opengl gl2ps gtest --triplet x64-windows

      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install Python packages
        run: pip install sip pyqt5 pyqt-builder numpy

      - name: Configuring
        run: |
          mkdir build; cd build
          cmake .. `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_SYSTEM_VERSION="10.0" `
            -DCMAKE_TOOLCHAIN_FILE="$Env:VCPKG_INSTALLATION_ROOT\scripts\buildsystems\vcpkg.cmake" `
            -DMAKHBER_SCRIPTING_PYTHON=ON `
            -DMAKHBER_BUILD_TESTS=ON

      - name: Building
        run: |
          cmake --build build --config Release -- -maxCpuCount

      - name: Testing
        run: |
          cd build
          $Env:PYTHONPATH = "$PWD\sip\build\makhber\"
          ctest -C Release --output-on-failure --repeat until-pass:3

  macos:
    runs-on: macos-11
    name: macos
    env:
      QT_VER: 5.15.2
      QWT_VER: 6.2.0

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ runner.os }}-Qt-${{ env.QT_VER }}-Cache

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ env.QT_VER }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Install prerequisties
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1
        run: |
          brew install --display-times muparser gsl gl2ps googletest

      - name: Cache Qwt
        id: cache-qwt
        uses: actions/cache@v1
        with:
          path: ../Qwt
          key: ${{ runner.os }}-Qwt-${{ env.QWT_VER }}-Qt-${{ env.QT_VER }}

      - name: Build and install Qwt
        if: steps.cache-qwt.outputs.cache-hit != 'true'
        run: |
          wget https://downloads.sourceforge.net/qwt/qwt-${{ env.QWT_VER }}.tar.bz2
          tar -xf qwt-${{ env.QWT_VER }}.tar.bz2 && cd qwt-${{ env.QWT_VER }}
          sed -i .bak "s|= \/usr\/local\/qwt-\$\$QWT\_VERSION|= ${GITHUB_WORKSPACE}/../Qwt|g" qwtconfig.pri
          qmake CONFIG-=debug_and_release CONFIG+=release qwt.pro
          make -j$(sysctl -n hw.logicalcpu)
          make install

      - name: Configuring
        run: |
          mkdir build && cd build
          cmake .. \
            -DMAKHBER_BUILD_TESTS=ON \
            -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/../Qwt

      - name: Building
        run: |
          make -j$(sysctl -n hw.logicalcpu) -C build

      - name: Testing
        run: |
          export DYLD_FALLBACK_FRAMEWORK_PATH=${GITHUB_WORKSPACE}/../Qwt/lib
          cd build
          ctest --output-on-failure --repeat until-pass:3
